apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
// apply from: rootProject.file('buildsystem/plugin-config.gradle')

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

android {
    def globalConfiguration = rootProject.extensions.getByName("ext")

    compileSdkVersion globalConfiguration.getAt("androidCompileSdkVersion")
    buildToolsVersion globalConfiguration.getAt("androidBuildToolsVersion")

    defaultConfig {
        minSdkVersion globalConfiguration.getAt("androidMinSdkVersion")
        targetSdkVersion globalConfiguration.getAt("androidTargetSdkVersion")

        applicationId globalConfiguration.getAt("androidApplicationId")
        versionCode globalConfiguration.getAt("androidVersionCode")
        versionName globalConfiguration.getAt("androidVersionName")
        testInstrumentationRunner globalConfiguration.getAt("testInstrumentationRunner")
        testApplicationId globalConfiguration.getAt("testApplicationId")
    }

    dexOptions {
        // Skip pre-dexing when running on Circle CI or when disabled via -Dpre-dex=false.
        preDexLibraries = globalConfiguration.getAt("isPreDexEnabled") && !globalConfiguration.getAt(
                "isCiEnvironment")
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
    }

    lintOptions {
        quiet true
        abortOnError false
        ignoreWarnings true
        disable 'InvalidPackage' //Some libraries have issues with this.
        disable 'OldTargetApi' //Lint gives this warning but SDK 20 would be Android L Beta.
        disable 'IconDensities' //For testing purpose. This is safe to remove.
        disable 'IconMissingDensityFolder' //For testing purpose. This is safe to remove.
    }

    signingConfigs {
        debug {
            storeFile file('../buildsystem/debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix '.DEBUG'
            signingConfig signingConfigs.debug
        }

        release {
            signingConfig signingConfigs.debug
        }
    }
}

dependencies {
    def presentationDependencies = rootProject.ext.presentationDependencies
    def presentationTestDependencies = rootProject.ext.presentationTestDependencies
    def developmentDependencies = rootProject.ext.developmentDependencies

    implementation project(':domain')
    implementation project(':data')

    implementation"org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
    implementation(presentationDependencies.appCompatV7) {
        exclude module: 'support-v4'
    }
    implementation presentationDependencies.designLibrary
    implementation presentationDependencies.constraintLayout
    annotationProcessor presentationDependencies.daggerCompiler
    implementation presentationDependencies.dagger
    implementation presentationDependencies.recyclerView
    implementation presentationDependencies.rxJava
    implementation presentationDependencies.rxAndroid
    compileOnly presentationDependencies.javaxAnnotation
    implementation(presentationDependencies.crashalytics) {
        transitive = true
    }
    implementation presentationDependencies.picasso

    androidTestCompile presentationTestDependencies.mockito
    androidTestCompile presentationTestDependencies.dexmaker
    androidTestCompile presentationTestDependencies.dexmakerMockito
    androidTestCompile presentationTestDependencies.espresso
    androidTestCompile presentationTestDependencies.testingSupportLib

    //Development // TODO
//    debugCompile developmentDependencies.leakCanary
//    releaseCompile developmentDependencies.leakCanaryNoOp
//    testCompile developmentDependencies.leakCanaryNoOp
}

//android.applicationVariants.all { variant ->
//  if (variant.buildType.name == 'release') {
//    variant.mergedFlavor.versionName = "${versionMajor}.${versionMinor}.${versionPatch}";
//  }
//}
